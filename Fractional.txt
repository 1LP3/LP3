def fractional_knapsack(weights, values, capacity):
    n = len(weights)

    # Calculate the value-to-weight ratios for each item
    ratios = [(values[i] / weights[i], i) for i in range(n)]

    # Sort items based on the value-to-weight ratio in descending order
    ratios.sort(reverse=True)

    max_value = 0
    knapsack_contents = [0] * n

    for ratio, i in ratios:
        if weights[i] <= capacity:
            # Take the whole item if it fits in the knapsack
            knapsack_contents[i] = 1
            max_value += values[i]
            capacity -= weights[i]
        else:
            # Take a fraction of the item if it doesn't fit entirely
            fraction = capacity / weights[i]
            knapsack_contents[i] = fraction
            max_value += fraction * values[i]
            break  # The knapsack is full

    return max_value, knapsack_contents

# Example usage
weights = [5, 3, 2, 10]
values = [12, 45, 60, 13]
capacity = 22

max_value, knapsack_contents = fractional_knapsack(weights, values, capacity)

print(f"Maximum value that can be obtained: {max_value}")
print("Knapsack contents:")
for i in range(len(weights)):
    if knapsack_contents[i] > 0:
        print(f"Item {i + 1}: {knapsack_contents[i]:.2f} units")
