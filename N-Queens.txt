def is_safe(board, row, col, n):
    # Check if there is a queen in the same row
    for i in range(col):
        if board[row][i] == 1:
            return False

    # Check upper-left diagonal
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    # Check lower-left diagonal
    for i, j in zip(range(row, n, 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    return True

def solve_n_queens_util(board, col, n):
    if col == n:
        # All queens are placed successfully
        print_board(board)
        return True

    res = False
    for i in range(n):
        if is_safe(board, i, col, n):
            board[i][col] = 1

            # Recur for the next column
            res = solve_n_queens_util(board, col + 1, n) or res

            # If placing a queen in the current position doesn't lead to a solution,
            # backtrack and try the next row
            board[i][col] = 0

    return res

def solve_n_queens(n):
    board = [[0 for _ in range(n)] for _ in range(n)]

    if not solve_n_queens_util(board, 0, n):
        print("No solution exists.")

def print_board(board):
    for row in board:
        print(" ".join(map(str, row)))
    print()

if __name__ == "__main__":
    n = 4  # Set the number of queens
    solve_n_queens(n)
